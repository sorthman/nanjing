package org.linlinjava.litemall.db.domain;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class SchoolUserExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table school_user
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table school_user
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table school_user
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public SchoolUserExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public SchoolUserExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public SchoolUserExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        SchoolUserExample example = new SchoolUserExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public SchoolUserExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public SchoolUserExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table school_user
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andUsertypeIsNull() {
            addCriterion("usertype is null");
            return (Criteria) this;
        }

        public Criteria andUsertypeIsNotNull() {
            addCriterion("usertype is not null");
            return (Criteria) this;
        }

        public Criteria andUsertypeEqualTo(String value) {
            addCriterion("usertype =", value, "usertype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andUsertypeEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("usertype = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsertypeNotEqualTo(String value) {
            addCriterion("usertype <>", value, "usertype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andUsertypeNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("usertype <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsertypeGreaterThan(String value) {
            addCriterion("usertype >", value, "usertype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andUsertypeGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("usertype > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsertypeGreaterThanOrEqualTo(String value) {
            addCriterion("usertype >=", value, "usertype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andUsertypeGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("usertype >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsertypeLessThan(String value) {
            addCriterion("usertype <", value, "usertype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andUsertypeLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("usertype < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsertypeLessThanOrEqualTo(String value) {
            addCriterion("usertype <=", value, "usertype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andUsertypeLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("usertype <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsertypeLike(String value) {
            addCriterion("usertype like", value, "usertype");
            return (Criteria) this;
        }

        public Criteria andUsertypeNotLike(String value) {
            addCriterion("usertype not like", value, "usertype");
            return (Criteria) this;
        }

        public Criteria andUsertypeIn(List<String> values) {
            addCriterion("usertype in", values, "usertype");
            return (Criteria) this;
        }

        public Criteria andUsertypeNotIn(List<String> values) {
            addCriterion("usertype not in", values, "usertype");
            return (Criteria) this;
        }

        public Criteria andUsertypeBetween(String value1, String value2) {
            addCriterion("usertype between", value1, value2, "usertype");
            return (Criteria) this;
        }

        public Criteria andUsertypeNotBetween(String value1, String value2) {
            addCriterion("usertype not between", value1, value2, "usertype");
            return (Criteria) this;
        }

        public Criteria andSchoolIsNull() {
            addCriterion("school is null");
            return (Criteria) this;
        }

        public Criteria andSchoolIsNotNull() {
            addCriterion("school is not null");
            return (Criteria) this;
        }

        public Criteria andSchoolEqualTo(String value) {
            addCriterion("school =", value, "school");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSchoolEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("school = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSchoolNotEqualTo(String value) {
            addCriterion("school <>", value, "school");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSchoolNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("school <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSchoolGreaterThan(String value) {
            addCriterion("school >", value, "school");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSchoolGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("school > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSchoolGreaterThanOrEqualTo(String value) {
            addCriterion("school >=", value, "school");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSchoolGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("school >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSchoolLessThan(String value) {
            addCriterion("school <", value, "school");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSchoolLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("school < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSchoolLessThanOrEqualTo(String value) {
            addCriterion("school <=", value, "school");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSchoolLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("school <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSchoolLike(String value) {
            addCriterion("school like", value, "school");
            return (Criteria) this;
        }

        public Criteria andSchoolNotLike(String value) {
            addCriterion("school not like", value, "school");
            return (Criteria) this;
        }

        public Criteria andSchoolIn(List<String> values) {
            addCriterion("school in", values, "school");
            return (Criteria) this;
        }

        public Criteria andSchoolNotIn(List<String> values) {
            addCriterion("school not in", values, "school");
            return (Criteria) this;
        }

        public Criteria andSchoolBetween(String value1, String value2) {
            addCriterion("school between", value1, value2, "school");
            return (Criteria) this;
        }

        public Criteria andSchoolNotBetween(String value1, String value2) {
            addCriterion("school not between", value1, value2, "school");
            return (Criteria) this;
        }

        public Criteria andFacultyIsNull() {
            addCriterion("faculty is null");
            return (Criteria) this;
        }

        public Criteria andFacultyIsNotNull() {
            addCriterion("faculty is not null");
            return (Criteria) this;
        }

        public Criteria andFacultyEqualTo(String value) {
            addCriterion("faculty =", value, "faculty");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFacultyEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("faculty = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFacultyNotEqualTo(String value) {
            addCriterion("faculty <>", value, "faculty");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFacultyNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("faculty <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFacultyGreaterThan(String value) {
            addCriterion("faculty >", value, "faculty");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFacultyGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("faculty > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFacultyGreaterThanOrEqualTo(String value) {
            addCriterion("faculty >=", value, "faculty");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFacultyGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("faculty >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFacultyLessThan(String value) {
            addCriterion("faculty <", value, "faculty");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFacultyLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("faculty < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFacultyLessThanOrEqualTo(String value) {
            addCriterion("faculty <=", value, "faculty");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFacultyLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("faculty <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFacultyLike(String value) {
            addCriterion("faculty like", value, "faculty");
            return (Criteria) this;
        }

        public Criteria andFacultyNotLike(String value) {
            addCriterion("faculty not like", value, "faculty");
            return (Criteria) this;
        }

        public Criteria andFacultyIn(List<String> values) {
            addCriterion("faculty in", values, "faculty");
            return (Criteria) this;
        }

        public Criteria andFacultyNotIn(List<String> values) {
            addCriterion("faculty not in", values, "faculty");
            return (Criteria) this;
        }

        public Criteria andFacultyBetween(String value1, String value2) {
            addCriterion("faculty between", value1, value2, "faculty");
            return (Criteria) this;
        }

        public Criteria andFacultyNotBetween(String value1, String value2) {
            addCriterion("faculty not between", value1, value2, "faculty");
            return (Criteria) this;
        }

        public Criteria andDepartmentIsNull() {
            addCriterion("department is null");
            return (Criteria) this;
        }

        public Criteria andDepartmentIsNotNull() {
            addCriterion("department is not null");
            return (Criteria) this;
        }

        public Criteria andDepartmentEqualTo(String value) {
            addCriterion("department =", value, "department");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andDepartmentEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("department = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDepartmentNotEqualTo(String value) {
            addCriterion("department <>", value, "department");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andDepartmentNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("department <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDepartmentGreaterThan(String value) {
            addCriterion("department >", value, "department");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andDepartmentGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("department > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDepartmentGreaterThanOrEqualTo(String value) {
            addCriterion("department >=", value, "department");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andDepartmentGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("department >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDepartmentLessThan(String value) {
            addCriterion("department <", value, "department");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andDepartmentLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("department < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDepartmentLessThanOrEqualTo(String value) {
            addCriterion("department <=", value, "department");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andDepartmentLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("department <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDepartmentLike(String value) {
            addCriterion("department like", value, "department");
            return (Criteria) this;
        }

        public Criteria andDepartmentNotLike(String value) {
            addCriterion("department not like", value, "department");
            return (Criteria) this;
        }

        public Criteria andDepartmentIn(List<String> values) {
            addCriterion("department in", values, "department");
            return (Criteria) this;
        }

        public Criteria andDepartmentNotIn(List<String> values) {
            addCriterion("department not in", values, "department");
            return (Criteria) this;
        }

        public Criteria andDepartmentBetween(String value1, String value2) {
            addCriterion("department between", value1, value2, "department");
            return (Criteria) this;
        }

        public Criteria andDepartmentNotBetween(String value1, String value2) {
            addCriterion("department not between", value1, value2, "department");
            return (Criteria) this;
        }

        public Criteria andNameIsNull() {
            addCriterion("`name` is null");
            return (Criteria) this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("`name` is not null");
            return (Criteria) this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("`name` =", value, "name");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andNameEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("`name` = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("`name` <>", value, "name");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andNameNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("`name` <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("`name` >", value, "name");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andNameGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("`name` > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("`name` >=", value, "name");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andNameGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("`name` >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("`name` <", value, "name");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andNameLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("`name` < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("`name` <=", value, "name");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andNameLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("`name` <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("`name` like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("`name` not like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("`name` in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("`name` not in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("`name` between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("`name` not between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andPhoneIsNull() {
            addCriterion("phone is null");
            return (Criteria) this;
        }

        public Criteria andPhoneIsNotNull() {
            addCriterion("phone is not null");
            return (Criteria) this;
        }

        public Criteria andPhoneEqualTo(String value) {
            addCriterion("phone =", value, "phone");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andPhoneEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("phone = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneNotEqualTo(String value) {
            addCriterion("phone <>", value, "phone");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andPhoneNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("phone <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneGreaterThan(String value) {
            addCriterion("phone >", value, "phone");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andPhoneGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("phone > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneGreaterThanOrEqualTo(String value) {
            addCriterion("phone >=", value, "phone");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andPhoneGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("phone >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneLessThan(String value) {
            addCriterion("phone <", value, "phone");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andPhoneLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("phone < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneLessThanOrEqualTo(String value) {
            addCriterion("phone <=", value, "phone");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andPhoneLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("phone <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneLike(String value) {
            addCriterion("phone like", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotLike(String value) {
            addCriterion("phone not like", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneIn(List<String> values) {
            addCriterion("phone in", values, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotIn(List<String> values) {
            addCriterion("phone not in", values, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneBetween(String value1, String value2) {
            addCriterion("phone between", value1, value2, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotBetween(String value1, String value2) {
            addCriterion("phone not between", value1, value2, "phone");
            return (Criteria) this;
        }

        public Criteria andIdcardIsNull() {
            addCriterion("idcard is null");
            return (Criteria) this;
        }

        public Criteria andIdcardIsNotNull() {
            addCriterion("idcard is not null");
            return (Criteria) this;
        }

        public Criteria andIdcardEqualTo(String value) {
            addCriterion("idcard =", value, "idcard");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdcardEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("idcard = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardNotEqualTo(String value) {
            addCriterion("idcard <>", value, "idcard");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdcardNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("idcard <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardGreaterThan(String value) {
            addCriterion("idcard >", value, "idcard");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdcardGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("idcard > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardGreaterThanOrEqualTo(String value) {
            addCriterion("idcard >=", value, "idcard");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdcardGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("idcard >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardLessThan(String value) {
            addCriterion("idcard <", value, "idcard");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdcardLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("idcard < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardLessThanOrEqualTo(String value) {
            addCriterion("idcard <=", value, "idcard");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIdcardLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("idcard <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardLike(String value) {
            addCriterion("idcard like", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotLike(String value) {
            addCriterion("idcard not like", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardIn(List<String> values) {
            addCriterion("idcard in", values, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotIn(List<String> values) {
            addCriterion("idcard not in", values, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardBetween(String value1, String value2) {
            addCriterion("idcard between", value1, value2, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotBetween(String value1, String value2) {
            addCriterion("idcard not between", value1, value2, "idcard");
            return (Criteria) this;
        }

        public Criteria andSexIsNull() {
            addCriterion("sex is null");
            return (Criteria) this;
        }

        public Criteria andSexIsNotNull() {
            addCriterion("sex is not null");
            return (Criteria) this;
        }

        public Criteria andSexEqualTo(String value) {
            addCriterion("sex =", value, "sex");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSexEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("sex = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexNotEqualTo(String value) {
            addCriterion("sex <>", value, "sex");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSexNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("sex <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexGreaterThan(String value) {
            addCriterion("sex >", value, "sex");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSexGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("sex > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexGreaterThanOrEqualTo(String value) {
            addCriterion("sex >=", value, "sex");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSexGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("sex >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexLessThan(String value) {
            addCriterion("sex <", value, "sex");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSexLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("sex < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexLessThanOrEqualTo(String value) {
            addCriterion("sex <=", value, "sex");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andSexLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("sex <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexLike(String value) {
            addCriterion("sex like", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotLike(String value) {
            addCriterion("sex not like", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexIn(List<String> values) {
            addCriterion("sex in", values, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotIn(List<String> values) {
            addCriterion("sex not in", values, "sex");
            return (Criteria) this;
        }

        public Criteria andSexBetween(String value1, String value2) {
            addCriterion("sex between", value1, value2, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotBetween(String value1, String value2) {
            addCriterion("sex not between", value1, value2, "sex");
            return (Criteria) this;
        }

        public Criteria andAgeIsNull() {
            addCriterion("age is null");
            return (Criteria) this;
        }

        public Criteria andAgeIsNotNull() {
            addCriterion("age is not null");
            return (Criteria) this;
        }

        public Criteria andAgeEqualTo(Integer value) {
            addCriterion("age =", value, "age");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAgeEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("age = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAgeNotEqualTo(Integer value) {
            addCriterion("age <>", value, "age");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAgeNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("age <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAgeGreaterThan(Integer value) {
            addCriterion("age >", value, "age");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAgeGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("age > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAgeGreaterThanOrEqualTo(Integer value) {
            addCriterion("age >=", value, "age");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAgeGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("age >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAgeLessThan(Integer value) {
            addCriterion("age <", value, "age");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAgeLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("age < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAgeLessThanOrEqualTo(Integer value) {
            addCriterion("age <=", value, "age");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAgeLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("age <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAgeIn(List<Integer> values) {
            addCriterion("age in", values, "age");
            return (Criteria) this;
        }

        public Criteria andAgeNotIn(List<Integer> values) {
            addCriterion("age not in", values, "age");
            return (Criteria) this;
        }

        public Criteria andAgeBetween(Integer value1, Integer value2) {
            addCriterion("age between", value1, value2, "age");
            return (Criteria) this;
        }

        public Criteria andAgeNotBetween(Integer value1, Integer value2) {
            addCriterion("age not between", value1, value2, "age");
            return (Criteria) this;
        }

        public Criteria andBirthdayIsNull() {
            addCriterion("birthday is null");
            return (Criteria) this;
        }

        public Criteria andBirthdayIsNotNull() {
            addCriterion("birthday is not null");
            return (Criteria) this;
        }

        public Criteria andBirthdayEqualTo(String value) {
            addCriterion("birthday =", value, "birthday");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andBirthdayEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("birthday = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdayNotEqualTo(String value) {
            addCriterion("birthday <>", value, "birthday");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andBirthdayNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("birthday <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdayGreaterThan(String value) {
            addCriterion("birthday >", value, "birthday");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andBirthdayGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("birthday > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdayGreaterThanOrEqualTo(String value) {
            addCriterion("birthday >=", value, "birthday");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andBirthdayGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("birthday >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdayLessThan(String value) {
            addCriterion("birthday <", value, "birthday");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andBirthdayLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("birthday < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdayLessThanOrEqualTo(String value) {
            addCriterion("birthday <=", value, "birthday");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andBirthdayLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("birthday <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdayLike(String value) {
            addCriterion("birthday like", value, "birthday");
            return (Criteria) this;
        }

        public Criteria andBirthdayNotLike(String value) {
            addCriterion("birthday not like", value, "birthday");
            return (Criteria) this;
        }

        public Criteria andBirthdayIn(List<String> values) {
            addCriterion("birthday in", values, "birthday");
            return (Criteria) this;
        }

        public Criteria andBirthdayNotIn(List<String> values) {
            addCriterion("birthday not in", values, "birthday");
            return (Criteria) this;
        }

        public Criteria andBirthdayBetween(String value1, String value2) {
            addCriterion("birthday between", value1, value2, "birthday");
            return (Criteria) this;
        }

        public Criteria andBirthdayNotBetween(String value1, String value2) {
            addCriterion("birthday not between", value1, value2, "birthday");
            return (Criteria) this;
        }

        public Criteria andCommunityIsNull() {
            addCriterion("community is null");
            return (Criteria) this;
        }

        public Criteria andCommunityIsNotNull() {
            addCriterion("community is not null");
            return (Criteria) this;
        }

        public Criteria andCommunityEqualTo(String value) {
            addCriterion("community =", value, "community");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andCommunityEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("community = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCommunityNotEqualTo(String value) {
            addCriterion("community <>", value, "community");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andCommunityNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("community <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCommunityGreaterThan(String value) {
            addCriterion("community >", value, "community");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andCommunityGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("community > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCommunityGreaterThanOrEqualTo(String value) {
            addCriterion("community >=", value, "community");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andCommunityGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("community >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCommunityLessThan(String value) {
            addCriterion("community <", value, "community");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andCommunityLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("community < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCommunityLessThanOrEqualTo(String value) {
            addCriterion("community <=", value, "community");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andCommunityLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("community <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCommunityLike(String value) {
            addCriterion("community like", value, "community");
            return (Criteria) this;
        }

        public Criteria andCommunityNotLike(String value) {
            addCriterion("community not like", value, "community");
            return (Criteria) this;
        }

        public Criteria andCommunityIn(List<String> values) {
            addCriterion("community in", values, "community");
            return (Criteria) this;
        }

        public Criteria andCommunityNotIn(List<String> values) {
            addCriterion("community not in", values, "community");
            return (Criteria) this;
        }

        public Criteria andCommunityBetween(String value1, String value2) {
            addCriterion("community between", value1, value2, "community");
            return (Criteria) this;
        }

        public Criteria andCommunityNotBetween(String value1, String value2) {
            addCriterion("community not between", value1, value2, "community");
            return (Criteria) this;
        }

        public Criteria andLiveaddressIsNull() {
            addCriterion("liveaddress is null");
            return (Criteria) this;
        }

        public Criteria andLiveaddressIsNotNull() {
            addCriterion("liveaddress is not null");
            return (Criteria) this;
        }

        public Criteria andLiveaddressEqualTo(String value) {
            addCriterion("liveaddress =", value, "liveaddress");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLiveaddressEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("liveaddress = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLiveaddressNotEqualTo(String value) {
            addCriterion("liveaddress <>", value, "liveaddress");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLiveaddressNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("liveaddress <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLiveaddressGreaterThan(String value) {
            addCriterion("liveaddress >", value, "liveaddress");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLiveaddressGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("liveaddress > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLiveaddressGreaterThanOrEqualTo(String value) {
            addCriterion("liveaddress >=", value, "liveaddress");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLiveaddressGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("liveaddress >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLiveaddressLessThan(String value) {
            addCriterion("liveaddress <", value, "liveaddress");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLiveaddressLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("liveaddress < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLiveaddressLessThanOrEqualTo(String value) {
            addCriterion("liveaddress <=", value, "liveaddress");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLiveaddressLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("liveaddress <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLiveaddressLike(String value) {
            addCriterion("liveaddress like", value, "liveaddress");
            return (Criteria) this;
        }

        public Criteria andLiveaddressNotLike(String value) {
            addCriterion("liveaddress not like", value, "liveaddress");
            return (Criteria) this;
        }

        public Criteria andLiveaddressIn(List<String> values) {
            addCriterion("liveaddress in", values, "liveaddress");
            return (Criteria) this;
        }

        public Criteria andLiveaddressNotIn(List<String> values) {
            addCriterion("liveaddress not in", values, "liveaddress");
            return (Criteria) this;
        }

        public Criteria andLiveaddressBetween(String value1, String value2) {
            addCriterion("liveaddress between", value1, value2, "liveaddress");
            return (Criteria) this;
        }

        public Criteria andLiveaddressNotBetween(String value1, String value2) {
            addCriterion("liveaddress not between", value1, value2, "liveaddress");
            return (Criteria) this;
        }

        public Criteria andArrivedateIsNull() {
            addCriterion("arrivedate is null");
            return (Criteria) this;
        }

        public Criteria andArrivedateIsNotNull() {
            addCriterion("arrivedate is not null");
            return (Criteria) this;
        }

        public Criteria andArrivedateEqualTo(LocalDateTime value) {
            addCriterion("arrivedate =", value, "arrivedate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andArrivedateEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("arrivedate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andArrivedateNotEqualTo(LocalDateTime value) {
            addCriterion("arrivedate <>", value, "arrivedate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andArrivedateNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("arrivedate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andArrivedateGreaterThan(LocalDateTime value) {
            addCriterion("arrivedate >", value, "arrivedate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andArrivedateGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("arrivedate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andArrivedateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("arrivedate >=", value, "arrivedate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andArrivedateGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("arrivedate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andArrivedateLessThan(LocalDateTime value) {
            addCriterion("arrivedate <", value, "arrivedate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andArrivedateLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("arrivedate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andArrivedateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("arrivedate <=", value, "arrivedate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andArrivedateLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("arrivedate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andArrivedateIn(List<LocalDateTime> values) {
            addCriterion("arrivedate in", values, "arrivedate");
            return (Criteria) this;
        }

        public Criteria andArrivedateNotIn(List<LocalDateTime> values) {
            addCriterion("arrivedate not in", values, "arrivedate");
            return (Criteria) this;
        }

        public Criteria andArrivedateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("arrivedate between", value1, value2, "arrivedate");
            return (Criteria) this;
        }

        public Criteria andArrivedateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("arrivedate not between", value1, value2, "arrivedate");
            return (Criteria) this;
        }

        public Criteria andFromprovinceIsNull() {
            addCriterion("fromprovince is null");
            return (Criteria) this;
        }

        public Criteria andFromprovinceIsNotNull() {
            addCriterion("fromprovince is not null");
            return (Criteria) this;
        }

        public Criteria andFromprovinceEqualTo(String value) {
            addCriterion("fromprovince =", value, "fromprovince");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromprovinceEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromprovince = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromprovinceNotEqualTo(String value) {
            addCriterion("fromprovince <>", value, "fromprovince");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromprovinceNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromprovince <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromprovinceGreaterThan(String value) {
            addCriterion("fromprovince >", value, "fromprovince");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromprovinceGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromprovince > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromprovinceGreaterThanOrEqualTo(String value) {
            addCriterion("fromprovince >=", value, "fromprovince");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromprovinceGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromprovince >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromprovinceLessThan(String value) {
            addCriterion("fromprovince <", value, "fromprovince");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromprovinceLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromprovince < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromprovinceLessThanOrEqualTo(String value) {
            addCriterion("fromprovince <=", value, "fromprovince");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromprovinceLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromprovince <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromprovinceLike(String value) {
            addCriterion("fromprovince like", value, "fromprovince");
            return (Criteria) this;
        }

        public Criteria andFromprovinceNotLike(String value) {
            addCriterion("fromprovince not like", value, "fromprovince");
            return (Criteria) this;
        }

        public Criteria andFromprovinceIn(List<String> values) {
            addCriterion("fromprovince in", values, "fromprovince");
            return (Criteria) this;
        }

        public Criteria andFromprovinceNotIn(List<String> values) {
            addCriterion("fromprovince not in", values, "fromprovince");
            return (Criteria) this;
        }

        public Criteria andFromprovinceBetween(String value1, String value2) {
            addCriterion("fromprovince between", value1, value2, "fromprovince");
            return (Criteria) this;
        }

        public Criteria andFromprovinceNotBetween(String value1, String value2) {
            addCriterion("fromprovince not between", value1, value2, "fromprovince");
            return (Criteria) this;
        }

        public Criteria andFromcityIsNull() {
            addCriterion("fromcity is null");
            return (Criteria) this;
        }

        public Criteria andFromcityIsNotNull() {
            addCriterion("fromcity is not null");
            return (Criteria) this;
        }

        public Criteria andFromcityEqualTo(String value) {
            addCriterion("fromcity =", value, "fromcity");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromcityEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromcity = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromcityNotEqualTo(String value) {
            addCriterion("fromcity <>", value, "fromcity");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromcityNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromcity <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromcityGreaterThan(String value) {
            addCriterion("fromcity >", value, "fromcity");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromcityGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromcity > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromcityGreaterThanOrEqualTo(String value) {
            addCriterion("fromcity >=", value, "fromcity");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromcityGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromcity >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromcityLessThan(String value) {
            addCriterion("fromcity <", value, "fromcity");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromcityLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromcity < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromcityLessThanOrEqualTo(String value) {
            addCriterion("fromcity <=", value, "fromcity");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromcityLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromcity <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromcityLike(String value) {
            addCriterion("fromcity like", value, "fromcity");
            return (Criteria) this;
        }

        public Criteria andFromcityNotLike(String value) {
            addCriterion("fromcity not like", value, "fromcity");
            return (Criteria) this;
        }

        public Criteria andFromcityIn(List<String> values) {
            addCriterion("fromcity in", values, "fromcity");
            return (Criteria) this;
        }

        public Criteria andFromcityNotIn(List<String> values) {
            addCriterion("fromcity not in", values, "fromcity");
            return (Criteria) this;
        }

        public Criteria andFromcityBetween(String value1, String value2) {
            addCriterion("fromcity between", value1, value2, "fromcity");
            return (Criteria) this;
        }

        public Criteria andFromcityNotBetween(String value1, String value2) {
            addCriterion("fromcity not between", value1, value2, "fromcity");
            return (Criteria) this;
        }

        public Criteria andFromdistrictIsNull() {
            addCriterion("fromdistrict is null");
            return (Criteria) this;
        }

        public Criteria andFromdistrictIsNotNull() {
            addCriterion("fromdistrict is not null");
            return (Criteria) this;
        }

        public Criteria andFromdistrictEqualTo(String value) {
            addCriterion("fromdistrict =", value, "fromdistrict");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromdistrictEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromdistrict = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromdistrictNotEqualTo(String value) {
            addCriterion("fromdistrict <>", value, "fromdistrict");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromdistrictNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromdistrict <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromdistrictGreaterThan(String value) {
            addCriterion("fromdistrict >", value, "fromdistrict");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromdistrictGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromdistrict > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromdistrictGreaterThanOrEqualTo(String value) {
            addCriterion("fromdistrict >=", value, "fromdistrict");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromdistrictGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromdistrict >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromdistrictLessThan(String value) {
            addCriterion("fromdistrict <", value, "fromdistrict");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromdistrictLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromdistrict < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromdistrictLessThanOrEqualTo(String value) {
            addCriterion("fromdistrict <=", value, "fromdistrict");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromdistrictLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromdistrict <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromdistrictLike(String value) {
            addCriterion("fromdistrict like", value, "fromdistrict");
            return (Criteria) this;
        }

        public Criteria andFromdistrictNotLike(String value) {
            addCriterion("fromdistrict not like", value, "fromdistrict");
            return (Criteria) this;
        }

        public Criteria andFromdistrictIn(List<String> values) {
            addCriterion("fromdistrict in", values, "fromdistrict");
            return (Criteria) this;
        }

        public Criteria andFromdistrictNotIn(List<String> values) {
            addCriterion("fromdistrict not in", values, "fromdistrict");
            return (Criteria) this;
        }

        public Criteria andFromdistrictBetween(String value1, String value2) {
            addCriterion("fromdistrict between", value1, value2, "fromdistrict");
            return (Criteria) this;
        }

        public Criteria andFromdistrictNotBetween(String value1, String value2) {
            addCriterion("fromdistrict not between", value1, value2, "fromdistrict");
            return (Criteria) this;
        }

        public Criteria andIfwhIsNull() {
            addCriterion("ifwh is null");
            return (Criteria) this;
        }

        public Criteria andIfwhIsNotNull() {
            addCriterion("ifwh is not null");
            return (Criteria) this;
        }

        public Criteria andIfwhEqualTo(String value) {
            addCriterion("ifwh =", value, "ifwh");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIfwhEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("ifwh = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIfwhNotEqualTo(String value) {
            addCriterion("ifwh <>", value, "ifwh");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIfwhNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("ifwh <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIfwhGreaterThan(String value) {
            addCriterion("ifwh >", value, "ifwh");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIfwhGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("ifwh > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIfwhGreaterThanOrEqualTo(String value) {
            addCriterion("ifwh >=", value, "ifwh");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIfwhGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("ifwh >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIfwhLessThan(String value) {
            addCriterion("ifwh <", value, "ifwh");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIfwhLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("ifwh < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIfwhLessThanOrEqualTo(String value) {
            addCriterion("ifwh <=", value, "ifwh");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIfwhLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("ifwh <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIfwhLike(String value) {
            addCriterion("ifwh like", value, "ifwh");
            return (Criteria) this;
        }

        public Criteria andIfwhNotLike(String value) {
            addCriterion("ifwh not like", value, "ifwh");
            return (Criteria) this;
        }

        public Criteria andIfwhIn(List<String> values) {
            addCriterion("ifwh in", values, "ifwh");
            return (Criteria) this;
        }

        public Criteria andIfwhNotIn(List<String> values) {
            addCriterion("ifwh not in", values, "ifwh");
            return (Criteria) this;
        }

        public Criteria andIfwhBetween(String value1, String value2) {
            addCriterion("ifwh between", value1, value2, "ifwh");
            return (Criteria) this;
        }

        public Criteria andIfwhNotBetween(String value1, String value2) {
            addCriterion("ifwh not between", value1, value2, "ifwh");
            return (Criteria) this;
        }

        public Criteria andWhtimeIsNull() {
            addCriterion("whtime is null");
            return (Criteria) this;
        }

        public Criteria andWhtimeIsNotNull() {
            addCriterion("whtime is not null");
            return (Criteria) this;
        }

        public Criteria andWhtimeEqualTo(String value) {
            addCriterion("whtime =", value, "whtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andWhtimeEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("whtime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andWhtimeNotEqualTo(String value) {
            addCriterion("whtime <>", value, "whtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andWhtimeNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("whtime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andWhtimeGreaterThan(String value) {
            addCriterion("whtime >", value, "whtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andWhtimeGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("whtime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andWhtimeGreaterThanOrEqualTo(String value) {
            addCriterion("whtime >=", value, "whtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andWhtimeGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("whtime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andWhtimeLessThan(String value) {
            addCriterion("whtime <", value, "whtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andWhtimeLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("whtime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andWhtimeLessThanOrEqualTo(String value) {
            addCriterion("whtime <=", value, "whtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andWhtimeLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("whtime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andWhtimeLike(String value) {
            addCriterion("whtime like", value, "whtime");
            return (Criteria) this;
        }

        public Criteria andWhtimeNotLike(String value) {
            addCriterion("whtime not like", value, "whtime");
            return (Criteria) this;
        }

        public Criteria andWhtimeIn(List<String> values) {
            addCriterion("whtime in", values, "whtime");
            return (Criteria) this;
        }

        public Criteria andWhtimeNotIn(List<String> values) {
            addCriterion("whtime not in", values, "whtime");
            return (Criteria) this;
        }

        public Criteria andWhtimeBetween(String value1, String value2) {
            addCriterion("whtime between", value1, value2, "whtime");
            return (Criteria) this;
        }

        public Criteria andWhtimeNotBetween(String value1, String value2) {
            addCriterion("whtime not between", value1, value2, "whtime");
            return (Criteria) this;
        }

        public Criteria andLivetypeIsNull() {
            addCriterion("livetype is null");
            return (Criteria) this;
        }

        public Criteria andLivetypeIsNotNull() {
            addCriterion("livetype is not null");
            return (Criteria) this;
        }

        public Criteria andLivetypeEqualTo(String value) {
            addCriterion("livetype =", value, "livetype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLivetypeEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("livetype = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLivetypeNotEqualTo(String value) {
            addCriterion("livetype <>", value, "livetype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLivetypeNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("livetype <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLivetypeGreaterThan(String value) {
            addCriterion("livetype >", value, "livetype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLivetypeGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("livetype > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLivetypeGreaterThanOrEqualTo(String value) {
            addCriterion("livetype >=", value, "livetype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLivetypeGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("livetype >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLivetypeLessThan(String value) {
            addCriterion("livetype <", value, "livetype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLivetypeLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("livetype < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLivetypeLessThanOrEqualTo(String value) {
            addCriterion("livetype <=", value, "livetype");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andLivetypeLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("livetype <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLivetypeLike(String value) {
            addCriterion("livetype like", value, "livetype");
            return (Criteria) this;
        }

        public Criteria andLivetypeNotLike(String value) {
            addCriterion("livetype not like", value, "livetype");
            return (Criteria) this;
        }

        public Criteria andLivetypeIn(List<String> values) {
            addCriterion("livetype in", values, "livetype");
            return (Criteria) this;
        }

        public Criteria andLivetypeNotIn(List<String> values) {
            addCriterion("livetype not in", values, "livetype");
            return (Criteria) this;
        }

        public Criteria andLivetypeBetween(String value1, String value2) {
            addCriterion("livetype between", value1, value2, "livetype");
            return (Criteria) this;
        }

        public Criteria andLivetypeNotBetween(String value1, String value2) {
            addCriterion("livetype not between", value1, value2, "livetype");
            return (Criteria) this;
        }

        public Criteria andRemarkIsNull() {
            addCriterion("remark is null");
            return (Criteria) this;
        }

        public Criteria andRemarkIsNotNull() {
            addCriterion("remark is not null");
            return (Criteria) this;
        }

        public Criteria andRemarkEqualTo(String value) {
            addCriterion("remark =", value, "remark");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andRemarkEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("remark = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRemarkNotEqualTo(String value) {
            addCriterion("remark <>", value, "remark");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andRemarkNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("remark <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRemarkGreaterThan(String value) {
            addCriterion("remark >", value, "remark");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andRemarkGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("remark > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRemarkGreaterThanOrEqualTo(String value) {
            addCriterion("remark >=", value, "remark");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andRemarkGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("remark >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRemarkLessThan(String value) {
            addCriterion("remark <", value, "remark");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andRemarkLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("remark < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRemarkLessThanOrEqualTo(String value) {
            addCriterion("remark <=", value, "remark");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andRemarkLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("remark <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRemarkLike(String value) {
            addCriterion("remark like", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotLike(String value) {
            addCriterion("remark not like", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkIn(List<String> values) {
            addCriterion("remark in", values, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotIn(List<String> values) {
            addCriterion("remark not in", values, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkBetween(String value1, String value2) {
            addCriterion("remark between", value1, value2, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotBetween(String value1, String value2) {
            addCriterion("remark not between", value1, value2, "remark");
            return (Criteria) this;
        }

        public Criteria andAddtimeIsNull() {
            addCriterion("addtime is null");
            return (Criteria) this;
        }

        public Criteria andAddtimeIsNotNull() {
            addCriterion("addtime is not null");
            return (Criteria) this;
        }

        public Criteria andAddtimeEqualTo(LocalDateTime value) {
            addCriterion("addtime =", value, "addtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAddtimeEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("addtime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAddtimeNotEqualTo(LocalDateTime value) {
            addCriterion("addtime <>", value, "addtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAddtimeNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("addtime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAddtimeGreaterThan(LocalDateTime value) {
            addCriterion("addtime >", value, "addtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAddtimeGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("addtime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAddtimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("addtime >=", value, "addtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAddtimeGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("addtime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAddtimeLessThan(LocalDateTime value) {
            addCriterion("addtime <", value, "addtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAddtimeLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("addtime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAddtimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("addtime <=", value, "addtime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAddtimeLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("addtime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAddtimeIn(List<LocalDateTime> values) {
            addCriterion("addtime in", values, "addtime");
            return (Criteria) this;
        }

        public Criteria andAddtimeNotIn(List<LocalDateTime> values) {
            addCriterion("addtime not in", values, "addtime");
            return (Criteria) this;
        }

        public Criteria andAddtimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("addtime between", value1, value2, "addtime");
            return (Criteria) this;
        }

        public Criteria andAddtimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("addtime not between", value1, value2, "addtime");
            return (Criteria) this;
        }

        public Criteria andModifytimeIsNull() {
            addCriterion("modifytime is null");
            return (Criteria) this;
        }

        public Criteria andModifytimeIsNotNull() {
            addCriterion("modifytime is not null");
            return (Criteria) this;
        }

        public Criteria andModifytimeEqualTo(LocalDateTime value) {
            addCriterion("modifytime =", value, "modifytime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andModifytimeEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("modifytime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andModifytimeNotEqualTo(LocalDateTime value) {
            addCriterion("modifytime <>", value, "modifytime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andModifytimeNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("modifytime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andModifytimeGreaterThan(LocalDateTime value) {
            addCriterion("modifytime >", value, "modifytime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andModifytimeGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("modifytime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andModifytimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("modifytime >=", value, "modifytime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andModifytimeGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("modifytime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andModifytimeLessThan(LocalDateTime value) {
            addCriterion("modifytime <", value, "modifytime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andModifytimeLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("modifytime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andModifytimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("modifytime <=", value, "modifytime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andModifytimeLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("modifytime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andModifytimeIn(List<LocalDateTime> values) {
            addCriterion("modifytime in", values, "modifytime");
            return (Criteria) this;
        }

        public Criteria andModifytimeNotIn(List<LocalDateTime> values) {
            addCriterion("modifytime not in", values, "modifytime");
            return (Criteria) this;
        }

        public Criteria andModifytimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("modifytime between", value1, value2, "modifytime");
            return (Criteria) this;
        }

        public Criteria andModifytimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("modifytime not between", value1, value2, "modifytime");
            return (Criteria) this;
        }

        public Criteria andFromotherIsNull() {
            addCriterion("fromother is null");
            return (Criteria) this;
        }

        public Criteria andFromotherIsNotNull() {
            addCriterion("fromother is not null");
            return (Criteria) this;
        }

        public Criteria andFromotherEqualTo(String value) {
            addCriterion("fromother =", value, "fromother");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromotherEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromother = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromotherNotEqualTo(String value) {
            addCriterion("fromother <>", value, "fromother");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromotherNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromother <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromotherGreaterThan(String value) {
            addCriterion("fromother >", value, "fromother");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromotherGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromother > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromotherGreaterThanOrEqualTo(String value) {
            addCriterion("fromother >=", value, "fromother");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromotherGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromother >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromotherLessThan(String value) {
            addCriterion("fromother <", value, "fromother");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromotherLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromother < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromotherLessThanOrEqualTo(String value) {
            addCriterion("fromother <=", value, "fromother");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andFromotherLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("fromother <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFromotherLike(String value) {
            addCriterion("fromother like", value, "fromother");
            return (Criteria) this;
        }

        public Criteria andFromotherNotLike(String value) {
            addCriterion("fromother not like", value, "fromother");
            return (Criteria) this;
        }

        public Criteria andFromotherIn(List<String> values) {
            addCriterion("fromother in", values, "fromother");
            return (Criteria) this;
        }

        public Criteria andFromotherNotIn(List<String> values) {
            addCriterion("fromother not in", values, "fromother");
            return (Criteria) this;
        }

        public Criteria andFromotherBetween(String value1, String value2) {
            addCriterion("fromother between", value1, value2, "fromother");
            return (Criteria) this;
        }

        public Criteria andFromotherNotBetween(String value1, String value2) {
            addCriterion("fromother not between", value1, value2, "fromother");
            return (Criteria) this;
        }

        public Criteria andIftouchIsNull() {
            addCriterion("iftouch is null");
            return (Criteria) this;
        }

        public Criteria andIftouchIsNotNull() {
            addCriterion("iftouch is not null");
            return (Criteria) this;
        }

        public Criteria andIftouchEqualTo(String value) {
            addCriterion("iftouch =", value, "iftouch");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIftouchEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("iftouch = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIftouchNotEqualTo(String value) {
            addCriterion("iftouch <>", value, "iftouch");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIftouchNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("iftouch <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIftouchGreaterThan(String value) {
            addCriterion("iftouch >", value, "iftouch");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIftouchGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("iftouch > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIftouchGreaterThanOrEqualTo(String value) {
            addCriterion("iftouch >=", value, "iftouch");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIftouchGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("iftouch >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIftouchLessThan(String value) {
            addCriterion("iftouch <", value, "iftouch");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIftouchLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("iftouch < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIftouchLessThanOrEqualTo(String value) {
            addCriterion("iftouch <=", value, "iftouch");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andIftouchLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("iftouch <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIftouchLike(String value) {
            addCriterion("iftouch like", value, "iftouch");
            return (Criteria) this;
        }

        public Criteria andIftouchNotLike(String value) {
            addCriterion("iftouch not like", value, "iftouch");
            return (Criteria) this;
        }

        public Criteria andIftouchIn(List<String> values) {
            addCriterion("iftouch in", values, "iftouch");
            return (Criteria) this;
        }

        public Criteria andIftouchNotIn(List<String> values) {
            addCriterion("iftouch not in", values, "iftouch");
            return (Criteria) this;
        }

        public Criteria andIftouchBetween(String value1, String value2) {
            addCriterion("iftouch between", value1, value2, "iftouch");
            return (Criteria) this;
        }

        public Criteria andIftouchNotBetween(String value1, String value2) {
            addCriterion("iftouch not between", value1, value2, "iftouch");
            return (Criteria) this;
        }

        public Criteria andAreaIsNull() {
            addCriterion("area is null");
            return (Criteria) this;
        }

        public Criteria andAreaIsNotNull() {
            addCriterion("area is not null");
            return (Criteria) this;
        }

        public Criteria andAreaEqualTo(String value) {
            addCriterion("area =", value, "area");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAreaEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("area = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAreaNotEqualTo(String value) {
            addCriterion("area <>", value, "area");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAreaNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("area <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAreaGreaterThan(String value) {
            addCriterion("area >", value, "area");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAreaGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("area > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAreaGreaterThanOrEqualTo(String value) {
            addCriterion("area >=", value, "area");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAreaGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("area >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAreaLessThan(String value) {
            addCriterion("area <", value, "area");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAreaLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("area < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAreaLessThanOrEqualTo(String value) {
            addCriterion("area <=", value, "area");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andAreaLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("area <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAreaLike(String value) {
            addCriterion("area like", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotLike(String value) {
            addCriterion("area not like", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaIn(List<String> values) {
            addCriterion("area in", values, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotIn(List<String> values) {
            addCriterion("area not in", values, "area");
            return (Criteria) this;
        }

        public Criteria andAreaBetween(String value1, String value2) {
            addCriterion("area between", value1, value2, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotBetween(String value1, String value2) {
            addCriterion("area not between", value1, value2, "area");
            return (Criteria) this;
        }

        public Criteria andStreetIsNull() {
            addCriterion("street is null");
            return (Criteria) this;
        }

        public Criteria andStreetIsNotNull() {
            addCriterion("street is not null");
            return (Criteria) this;
        }

        public Criteria andStreetEqualTo(String value) {
            addCriterion("street =", value, "street");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andStreetEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("street = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStreetNotEqualTo(String value) {
            addCriterion("street <>", value, "street");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andStreetNotEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("street <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStreetGreaterThan(String value) {
            addCriterion("street >", value, "street");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andStreetGreaterThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("street > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStreetGreaterThanOrEqualTo(String value) {
            addCriterion("street >=", value, "street");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andStreetGreaterThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("street >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStreetLessThan(String value) {
            addCriterion("street <", value, "street");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andStreetLessThanColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("street < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStreetLessThanOrEqualTo(String value) {
            addCriterion("street <=", value, "street");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria andStreetLessThanOrEqualToColumn(SchoolUser.Column column) {
            addCriterion(new StringBuilder("street <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStreetLike(String value) {
            addCriterion("street like", value, "street");
            return (Criteria) this;
        }

        public Criteria andStreetNotLike(String value) {
            addCriterion("street not like", value, "street");
            return (Criteria) this;
        }

        public Criteria andStreetIn(List<String> values) {
            addCriterion("street in", values, "street");
            return (Criteria) this;
        }

        public Criteria andStreetNotIn(List<String> values) {
            addCriterion("street not in", values, "street");
            return (Criteria) this;
        }

        public Criteria andStreetBetween(String value1, String value2) {
            addCriterion("street between", value1, value2, "street");
            return (Criteria) this;
        }

        public Criteria andStreetNotBetween(String value1, String value2) {
            addCriterion("street not between", value1, value2, "street");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table school_user
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table school_user
         *
         * @mbg.generated
         */
        private SchoolUserExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        protected Criteria(SchoolUserExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public SchoolUserExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table school_user
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table school_user
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table school_user
         *
         * @mbg.generated
         */
        void example(org.linlinjava.litemall.db.domain.SchoolUserExample example);
    }
}